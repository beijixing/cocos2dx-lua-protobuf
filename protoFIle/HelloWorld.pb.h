// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HelloWorld.proto

#ifndef PROTOBUF_HelloWorld_2eproto__INCLUDED
#define PROTOBUF_HelloWorld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HelloWorld_2eproto();
void protobuf_AssignDesc_HelloWorld_2eproto();
void protobuf_ShutdownFile_HelloWorld_2eproto();

class HelloWorld;

// ===================================================================

class HelloWorld : public ::google::protobuf::Message {
 public:
  HelloWorld();
  virtual ~HelloWorld();

  HelloWorld(const HelloWorld& from);

  inline HelloWorld& operator=(const HelloWorld& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloWorld& default_instance();

  void Swap(HelloWorld* other);

  // implements Message ----------------------------------------------

  HelloWorld* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloWorld& from);
  void MergeFrom(const HelloWorld& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // optional int32 opt = 3;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 3;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lm.HelloWorld)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_opt();
  inline void clear_has_opt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* str_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 opt_;
  friend void  protobuf_AddDesc_HelloWorld_2eproto();
  friend void protobuf_AssignDesc_HelloWorld_2eproto();
  friend void protobuf_ShutdownFile_HelloWorld_2eproto();

  void InitAsDefaultInstance();
  static HelloWorld* default_instance_;
};
// ===================================================================


// ===================================================================

// HelloWorld

// required int32 id = 1;
inline bool HelloWorld::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloWorld::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloWorld::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloWorld::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HelloWorld::id() const {
  // @@protoc_insertion_point(field_get:lm.HelloWorld.id)
  return id_;
}
inline void HelloWorld::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:lm.HelloWorld.id)
}

// required string str = 2;
inline bool HelloWorld::has_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelloWorld::set_has_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelloWorld::clear_has_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelloWorld::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& HelloWorld::str() const {
  // @@protoc_insertion_point(field_get:lm.HelloWorld.str)
  return *str_;
}
inline void HelloWorld::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:lm.HelloWorld.str)
}
inline void HelloWorld::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:lm.HelloWorld.str)
}
inline void HelloWorld::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lm.HelloWorld.str)
}
inline ::std::string* HelloWorld::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:lm.HelloWorld.str)
  return str_;
}
inline ::std::string* HelloWorld::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HelloWorld::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:lm.HelloWorld.str)
}

// optional int32 opt = 3;
inline bool HelloWorld::has_opt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HelloWorld::set_has_opt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HelloWorld::clear_has_opt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HelloWorld::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 HelloWorld::opt() const {
  // @@protoc_insertion_point(field_get:lm.HelloWorld.opt)
  return opt_;
}
inline void HelloWorld::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:lm.HelloWorld.opt)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HelloWorld_2eproto__INCLUDED
